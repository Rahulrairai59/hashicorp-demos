# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "centos/7"


 $script = <<SCRIPT
  sudo yum update -y
  sudo yum -y install wget
  sudo yum -y install ntp
  sudo yum -y install iptables-services
  sudo yum -y install net-tools
  sudo yum install -y java-1.8.0-openjdk-devel
  wget http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm
  sudo rpm -Uvh epel-release-7*.rpm
  sudo yum -y install pdsh
  sudo chkconfig ntpd on
  #sudo /etc/init.d/ntpd start
  systemctl start ntpd 
  sudo chkconfig iptables off
  #sudo /etc/init.d/iptables stop
  sudo systemctl stop iptables
  sudo setenforce 0
  sudo sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
  sudo sed -i 's/SELINUX=permissive/SELINUX=disabled/g' /etc/selinux/config
  sudo sh -c 'echo "* soft nofile 10000" >> /etc/security/limits.conf'
  sudo sh -c 'echo "* hard nofile 10000" >> /etc/security/limits.conf'
  sudo sh -c 'echo never > /sys/kernel/mm/transparent_hugepage/defrag'
  sudo sh -c 'echo never > /sys/kernel/mm/transparent_hugepage/enabled'
  sudo cp /vagrant/hosts /etc/hosts
  sudo mkdir -p /root/.ssh; chmod 600 /root/.ssh; cp /vagrant/id_rsa.pub /root/.ssh/
  sudo cp /vagrant/id_rsa /root/.ssh/ 
  sudo cat /vagrant/id_rsa.pub >> /root/.ssh/authorized_keys
  sudo chmod 700 -R /home/vagrant/.ssh
  sudo cp /vagrant/id_rsa /home/vagrant/.ssh/ 
  sudo chown vagrant:vagrant /home/vagrant/.ssh/id_rsa
  sudo cat /vagrant/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys
  wget http://download.virtualbox.org/virtualbox/4.3.8/VBoxGuestAdditions_4.3.8.iso
  sudo mkdir /media/VBoxGuestAdditions
  sudo mount -o loop,ro VBoxGuestAdditions_4.3.8.iso /media/VBoxGuestAdditions
  sudo sh /media/VBoxGuestAdditions/VBoxLinuxAdditions.run
  rm VBoxGuestAdditions_4.3.8.iso
  sudo umount /media/VBoxGuestAdditions
  sudo rmdir /media/VBoxGuestAdditions
SCRIPT
  
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL

  config.vm.provision "shell", inline: $script
  config.vm.boot_timeout = 3000
 
  # Vault Primary
  config.vm.define :vaultprimary do |a1|
    a1.vm.hostname = "vaultprimary"
    a1.vm.network :private_network, ip: "192.168.56.106"
    a1.vm.provider :virtualbox do |vb|
      vb.memory = "1024"
    end
   
    a1.vm.network "forwarded_port", guest: 8200, host: 8201    
    a1.vm.network "forwarded_port", guest: 8080, host: 8080
    a1.vm.network "forwarded_port", guest: 8080, host: 8081
    a1.vm.network "forwarded_port", guest: 80, host: 8083
    a1.vm.network "forwarded_port", guest: 22, host: 2222, host_ip: "127.0.0.1", id: 'ssh'
 
  end

  # Vault Secondary
  config.vm.define :vaultsecondary do |s1|
    s1.vm.hostname = "vaultsecondary"
    s1.vm.network :private_network, ip: "192.168.56.107"
    s1.vm.provider :virtualbox do |vb|
      vb.memory = "1024"
    end
  
    s1.vm.network "forwarded_port", guest: 8200, host: 8202     
  end

 
end
